== Abstract Syntax Tree ==
LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
  LogicalProject(num=[$1], id=[$0])
    LogicalTableScan(table=[[default_catalog, default_db, T]])

== Optimized Logical Plan ==
[[Sink]]
StreamExecSink(fields=[num, cnt])
  StreamExecGroupAggregate(groupBy=[num], select=[num, COUNT(id) AS cnt])
    StreamExecExchange(distribution=[hash[num]])
      StreamExecCalc(select=[num, id])
        StreamExecDataStreamScan(table=[[default_catalog, default_db, T]])
StreamExecSink(retract=[false], accMode=[Acc])
  StreamExecGroupAggregate(retract=[false], accMode=[Acc])
    StreamExecExchange(retract=[true], accMode=[Acc])
      StreamExecCalc(retract=[true], accMode=[Acc])
        StreamExecDataStreamScan(retract=[true], accMode=[Acc])

== Physical Execution Plan ==
 : Data Source
	content : collect elements with CollectionInputFormat

	 : Operator
		content : SourceConversion(table:[default_catalog, default_db, T], fields:(id, num, text))
		ship_strategy : FORWARD

		 : Operator
			content : Calc(select: (num, id))
			ship_strategy : FORWARD

			 : Operator
				content : GroupAggregate(groupBy: (num), select: (num, COUNT(id) AS cnt))
				ship_strategy : HASH

				 : Data Sink
					content : Sink: TestingUpsertTableSink(keys=(0))
					ship_strategy : FORWARD

