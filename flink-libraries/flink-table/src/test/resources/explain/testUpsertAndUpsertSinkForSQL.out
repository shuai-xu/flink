== Abstract Syntax Tree ==
LogicalAggregate(group=[{0}], frequency=[COUNT($1)])
+- LogicalProject(cnt=[$1], num=[$0])
   +- LogicalProject(num=[$0], cnt=[$1])
      +- LogicalFilter(condition=[<($0, 4)])
         +- LogicalTableScan(table=[[default_catalog, default_db, T1]])

LogicalProject(num=[$0], cnt=[$1])
+- LogicalFilter(condition=[AND(>=($0, 4), <($0, 6))])
   +- LogicalTableScan(table=[[default_catalog, default_db, T1]])

== Optimized Logical Plan ==
[[IntermediateTable=_DataStreamTable_1]]
StreamExecGroupAggregate(groupBy=[num], select=[num, COUNT(id) AS cnt], retract=[true], accMode=[AccRetract])
+- StreamExecExchange(distribution=[hash[num]], retract=[true], accMode=[Acc])
   +- StreamExecCalc(select=[num, id], retract=[true], accMode=[Acc])
      +- StreamExecDataStreamScan(table=[[default_catalog, default_db, T]], retract=[true], accMode=[Acc])

[[Sink]]
StreamExecSink(fields=[cnt, frequency], retract=[false], accMode=[Acc])
+- StreamExecGroupAggregate(groupBy=[cnt], select=[cnt, COUNT_RETRACT(num) AS frequency], retract=[false], accMode=[Acc])
   +- StreamExecExchange(distribution=[hash[cnt]], retract=[true], accMode=[AccRetract])
      +- StreamExecCalc(select=[num, cnt], where=[<(num, 4)], retract=[true], accMode=[AccRetract])
         +- StreamExecIntermediateTableScan(table=[[default_catalog, default_db, _DataStreamTable_1]], retract=[true], accMode=[AccRetract])

[[Sink]]
StreamExecSink(fields=[num, cnt], retract=[false], accMode=[AccRetract])
+- StreamExecCalc(select=[num, cnt], where=[AND(>=(num, 4), <(num, 6))], retract=[false], accMode=[AccRetract])
   +- StreamExecIntermediateTableScan(table=[[default_catalog, default_db, _DataStreamTable_1]], retract=[false], accMode=[AccRetract])

== Physical Execution Plan ==
 : Data Source
	content : collect elements with CollectionInputFormat

	 : Operator
		content : SourceConversion(table:[default_catalog, default_db, T], fields:(id, num, text))
		ship_strategy : FORWARD

		 : Operator
			content : Calc(select: (num, id))
			ship_strategy : FORWARD

			 : Operator
				content : GroupAggregate(groupBy: (num), select: (num, COUNT(id) AS cnt))
				ship_strategy : HASH

				 : Operator
					content : Calc(where: (num < 4), select: (num, cnt))
					ship_strategy : FORWARD

					 : Operator
						content : GroupAggregate(groupBy: (cnt), select: (cnt, COUNT_RETRACT(num) AS frequency))
						ship_strategy : HASH

						 : Operator
							content : Calc(where: ((num >= 4) AND (num < 6)), select: (num, cnt))
							ship_strategy : FORWARD

							 : Data Sink
								content : Sink: TestingUpsertTableSink(keys=(0))
								ship_strategy : FORWARD

								 : Data Sink
									content : Sink: TestingUpsertTableSink(keys=())
									ship_strategy : FORWARD

