== Abstract Syntax Tree ==
LogicalProject(id=[$0], num=[$1], text=[$2])
  LogicalFilter(condition=[LIKE($2, '%hello%')])
    LogicalTableScan(table=[[default_catalog, default_db, T]])

LogicalProject(num=[$0], cnt=[$1])
  LogicalFilter(condition=[<($0, 4)])
    LogicalTableScan(table=[[default_catalog, default_db, T3]])

LogicalProject(num=[$0], cnt=[$1])
  LogicalFilter(condition=[AND(>=($0, 4), <($0, 6))])
    LogicalTableScan(table=[[default_catalog, default_db, T3]])

== Optimized Logical Plan ==
[[IntermediateTable=_DataStreamTable_3]]
StreamExecDataStreamScan(table=[[default_catalog, default_db, T]])
StreamExecDataStreamScan(retract=[false], accMode=[Acc])

[[IntermediateTable=_DataStreamTable_4]]
StreamExecCalc(select=[id, num, text], where=[LIKE(text, '%hello%')])
  StreamExecDataStreamScan(table=[[default_catalog, default_db, T]])
StreamExecCalc(retract=[true], accMode=[Acc])
  StreamExecDataStreamScan(retract=[true], accMode=[Acc])

[[Sink]]
StreamExecSink(fields=[id, num, text])
  StreamExecDataStreamScan(table=[[default_catalog, default_db, _DataStreamTable_4]])
StreamExecSink(retract=[false], accMode=[Acc])
  StreamExecDataStreamScan(retract=[false], accMode=[Acc])

[[IntermediateTable=_DataStreamTable_5]]
StreamExecGroupAggregate(groupBy=[num], select=[num, COUNT(id) AS cnt])
  StreamExecExchange(distribution=[hash[num]])
    StreamExecUnion(all=[true], union=[num, id])
      StreamExecCalc(select=[num, id])
        StreamExecDataStreamScan(table=[[default_catalog, default_db, _DataStreamTable_4]])
      StreamExecCalc(select=[num, id], where=[LIKE(text, '%world%')])
        StreamExecDataStreamScan(table=[[default_catalog, default_db, T]])
StreamExecGroupAggregate(retract=[true], accMode=[AccRetract])
  StreamExecExchange(retract=[true], accMode=[Acc])
    StreamExecUnion(retract=[true], accMode=[Acc])
      StreamExecCalc(retract=[true], accMode=[Acc])
        StreamExecDataStreamScan(retract=[true], accMode=[Acc])
      StreamExecCalc(retract=[true], accMode=[Acc])
        StreamExecDataStreamScan(retract=[true], accMode=[Acc])

[[Sink]]
StreamExecSink(fields=[num, cnt])
  StreamExecCalc(select=[num, cnt], where=[<(num, 4)])
    StreamExecDataStreamScan(table=[[default_catalog, default_db, _DataStreamTable_5]])
StreamExecSink(retract=[false], accMode=[AccRetract])
  StreamExecCalc(retract=[true], accMode=[AccRetract])
    StreamExecDataStreamScan(retract=[true], accMode=[AccRetract])

[[Sink]]
StreamExecSink(fields=[num, cnt])
  StreamExecCalc(select=[num, cnt], where=[AND(>=(num, 4), <(num, 6))])
    StreamExecDataStreamScan(table=[[default_catalog, default_db, _DataStreamTable_5]])
StreamExecSink(retract=[false], accMode=[AccRetract])
  StreamExecCalc(retract=[false], accMode=[AccRetract])
    StreamExecDataStreamScan(retract=[false], accMode=[AccRetract])

== Physical Execution Plan ==
 : Data Source
	content : collect elements with CollectionInputFormat

	 : Operator
		content : SourceConversion(table:[default_catalog, default_db, T], fields:(id, num, text))
		ship_strategy : FORWARD

		 : Operator
			content : Calc(where: (text LIKE '%hello%'), select: (id, num, text))
			ship_strategy : FORWARD

			 : Operator
				content : SinkConversion to Row
				ship_strategy : FORWARD

				 : Operator
					content : Calc(select: (num, id))
					ship_strategy : FORWARD

					 : Operator
						content : SourceConversion(table:[default_catalog, default_db, T], fields:(id, num, text))
						ship_strategy : FORWARD

						 : Operator
							content : Calc(where: (text LIKE '%world%'), select: (num, id))
							ship_strategy : FORWARD

							 : Operator
								content : GroupAggregate(groupBy: (num), select: (num, COUNT(id) AS cnt))
								ship_strategy : HASH

								 : Operator
									content : Calc(where: (num < 4), select: (num, cnt))
									ship_strategy : FORWARD

									 : Operator
										content : SinkConversion to Tuple2
										ship_strategy : FORWARD

										 : Operator
											content : Map
											ship_strategy : FORWARD

											 : Operator
												content : Calc(where: ((num >= 4) AND (num < 6)), select: (num, cnt))
												ship_strategy : FORWARD

												 : Data Sink
													content : Sink: TestingAppendTableSink
													ship_strategy : FORWARD

													 : Data Sink
														content : Sink: TestingRetractTableSink
														ship_strategy : FORWARD

														 : Data Sink
															content : Sink: TestingUpsertTableSink(keys=())
															ship_strategy : FORWARD

