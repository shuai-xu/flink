<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="tesSQL">
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
+- LogicalProject(c=[$2], a=[$0])
   +- LogicalTableScan(table=[[SmallTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[Sink]]
HashAggregate(isMerge=[true], groupBy=[c], select=[c, Final_COUNT(count$0) AS cnt])
+- Exchange(distribution=[hash[c]])
   +- LocalHashAggregate(groupBy=[c], select=[c, Partial_COUNT(a) AS count$0])
      +- Calc(select=[c, a])
         +- BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(sum_a=[$0])
      +- LogicalProject(sum_a=[$1], c=[$0])
         +- LogicalAggregate(group=[{0}], sum_a=[SUM($1)])
            +- LogicalProject(c=[$2], a=[$0])
               +- LogicalTableScan(table=[[SmallTable3]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(sum_a=[$0])
      +- LogicalProject(sum_a=[$1], c=[$0])
         +- LogicalAggregate(group=[{0}], sum_a=[SUM($1)])
            +- LogicalProject(c=[$2], a=[$0])
               +- LogicalTableScan(table=[[SmallTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[IntermediateTable=_DataStreamTable_1]]
Calc(select=[sum_a, c])
+- HashAggregate(isMerge=[true], groupBy=[c], select=[c, Final_SUM(sum$0) AS sum_a])
   +- Exchange(distribution=[hash[c]])
      +- LocalHashAggregate(groupBy=[c], select=[c, Partial_SUM(a) AS sum$0])
         +- Calc(select=[c, a])
            +- BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])

[[Sink]]
Calc(select=[TMP_0 AS total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS TMP_0])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(sum_a) AS sum$0])
         +- Calc(select=[sum_a])
            +- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[sum_a, c])

[[Sink]]
Calc(select=[TMP_1 AS total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS TMP_1])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(sum_a) AS min$0])
         +- Calc(select=[sum_a])
            +- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[sum_a, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion1">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[SmallTable1]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[SmallTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[IntermediateTable=_DataStreamTable_2]]
Calc(select=[a, c])
+- BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])

[[IntermediateTable=_DataStreamTable_3]]
Calc(select=[d, f])
+- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[d, e, f])

[[Sink]]
Calc(select=[TMP_0 AS total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS TMP_0])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- BoundedDataStreamScan(table=[[_DataStreamTable_2]], fields=[a, c])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[d, f])

[[Sink]]
Calc(select=[TMP_1 AS total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS TMP_1])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(a) AS min$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- BoundedDataStreamScan(table=[[_DataStreamTable_2]], fields=[a, c])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[d, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion2">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[SmallTable1]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[SmallTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[IntermediateTable=_DataStreamTable_2]]
Calc(select=[a, c])
+- BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])

[[IntermediateTable=_DataStreamTable_3]]
Calc(select=[d, f])
+- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[d, e, f])

[[Sink]]
Calc(select=[TMP_0 AS total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS TMP_0])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- BoundedDataStreamScan(table=[[_DataStreamTable_2]], fields=[a, c])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[d, f])

[[Sink]]
Calc(select=[TMP_1 AS total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS TMP_1])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(a) AS min$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- BoundedDataStreamScan(table=[[_DataStreamTable_2]], fields=[a, c])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[d, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion3">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[SmallTable2]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[SmallTable2]])

LogicalProject(a=[$0])
+- LogicalUnion(all=[true])
   :- LogicalProject(a=[$0], c=[$2])
   :  +- LogicalTableScan(table=[[SmallTable3]])
   +- LogicalProject(d=[$0], f=[$2])
      +- LogicalTableScan(table=[[SmallTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[IntermediateTable=_DataStreamTable_3]]
Calc(select=[a, c])
+- BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])

[[IntermediateTable=_DataStreamTable_4]]
Calc(select=[d, f])
+- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[d, e, f])

[[IntermediateTable=_DataStreamTable_5]]
Calc(select=[a, c])
+- BoundedDataStreamScan(table=[[_DataStreamTable_2]], fields=[a, b, c])

[[Sink]]
Calc(select=[TMP_0 AS total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS TMP_0])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- Union(all=[true], union=[a, c])
               :  :- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[a, c])
               :  +- BoundedDataStreamScan(table=[[_DataStreamTable_4]], fields=[d, f])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_5]], fields=[a, c])

[[Sink]]
Calc(select=[TMP_1 AS total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS TMP_1])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(a) AS min$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- Union(all=[true], union=[a, c])
               :  :- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[a, c])
               :  +- BoundedDataStreamScan(table=[[_DataStreamTable_4]], fields=[d, f])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_5]], fields=[a, c])

[[Sink]]
Calc(select=[a])
+- Union(all=[true], union=[a, c])
   :- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[a, c])
   +- BoundedDataStreamScan(table=[[_DataStreamTable_4]], fields=[d, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion4">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalUnion(all=[true])
   :- LogicalProject(a=[$0], c=[$2])
   :  +- LogicalTableScan(table=[[SmallTable3]])
   +- LogicalProject(d=[$0], f=[$2])
      +- LogicalTableScan(table=[[SmallTable1]])

LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[SmallTable2]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[SmallTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[IntermediateTable=_DataStreamTable_3]]
Calc(select=[a, c])
+- BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])

[[IntermediateTable=_DataStreamTable_4]]
Calc(select=[d, f])
+- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[d, e, f])

[[Sink]]
Calc(select=[a])
+- Union(all=[true], union=[a, c])
   :- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[a, c])
   +- BoundedDataStreamScan(table=[[_DataStreamTable_4]], fields=[d, f])

[[IntermediateTable=_DataStreamTable_5]]
Calc(select=[a, c])
+- BoundedDataStreamScan(table=[[_DataStreamTable_2]], fields=[a, b, c])

[[Sink]]
Calc(select=[TMP_0 AS total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS TMP_0])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- Union(all=[true], union=[a, c])
               :  :- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[a, c])
               :  +- BoundedDataStreamScan(table=[[_DataStreamTable_4]], fields=[d, f])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_5]], fields=[a, c])

[[Sink]]
Calc(select=[TMP_1 AS total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS TMP_1])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(a) AS min$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- Union(all=[true], union=[a, c])
               :  :- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[a, c])
               :  +- BoundedDataStreamScan(table=[[_DataStreamTable_4]], fields=[d, f])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_5]], fields=[a, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion5">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[SmallTable2]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[SmallTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[IntermediateTable=_DataStreamTable_3]]
Calc(select=[a, c])
+- BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])

[[IntermediateTable=_DataStreamTable_4]]
Calc(select=[d, f])
+- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[d, e, f])

[[IntermediateTable=_DataStreamTable_5]]
Calc(select=[a, c])
+- BoundedDataStreamScan(table=[[_DataStreamTable_2]], fields=[a, b, c])

[[Sink]]
Calc(select=[TMP_0 AS total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS TMP_0])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- Union(all=[true], union=[a, c])
               :  :- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[a, c])
               :  +- BoundedDataStreamScan(table=[[_DataStreamTable_4]], fields=[d, f])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_5]], fields=[a, c])

[[Sink]]
Calc(select=[TMP_1 AS total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS TMP_1])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(a) AS min$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- Union(all=[true], union=[a, c])
               :  :- BoundedDataStreamScan(table=[[_DataStreamTable_3]], fields=[a, c])
               :  +- BoundedDataStreamScan(table=[[_DataStreamTable_4]], fields=[d, f])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_5]], fields=[a, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink1">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$0], cnt=[AS($1, 'cnt')])
+- LogicalAggregate(group=[{0}], TMP_0=[COUNT($1)])
   +- LogicalProject(c=[$2], b=[$1])
      +- LogicalTableScan(table=[[SmallTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[Sink]]
Calc(select=[c, TMP_0 AS cnt])
+- HashAggregate(isMerge=[true], groupBy=[c], select=[c, Final_COUNT(count$0) AS TMP_0])
   +- Exchange(distribution=[hash[c]])
      +- LocalHashAggregate(groupBy=[c], select=[c, Partial_COUNT(b) AS count$0])
         +- Calc(select=[c, b])
            +- BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink2">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$2], b=[$3], c1=[$1])
+- LogicalJoin(condition=[=($2, $0)], joinType=[inner])
   :- LogicalProject(a3=[AS($0, 'a3')], c1=[AS($2, 'c1')])
   :  +- LogicalFilter(condition=[<($1, 5)])
   :     +- LogicalProject(a=[$0], b=[$1], c=[$2])
   :        +- LogicalFilter(condition=[>=($0, 0)])
   :           +- LogicalTableScan(table=[[SmallTable3]])
   +- LogicalProject(a1=[$0], b=[$1], c2=[AS($3, 'c2')])
      +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
         :- LogicalProject(a1=[AS($0, 'a1')], b=[$1])
         :  +- LogicalFilter(condition=[<=($0, 10)])
         :     +- LogicalTableScan(table=[[SmallTable3]])
         +- LogicalProject(a2=[AS($0, 'a2')], c=[$2])
            +- LogicalFilter(condition=[>=($1, 5)])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalFilter(condition=[>=($0, 0)])
                     +- LogicalTableScan(table=[[SmallTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[IntermediateTable=_DataStreamTable_1]]
BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])

[[IntermediateTable=_DataStreamTable_2]]
Calc(select=[a, b, c], where=[>=(a, 0)])
+- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c])

[[Sink]]
Calc(select=[a1, b, c1])
+- HashJoin(where=[=(a1, a3)], join=[a3, c1, a1, b], joinType=[InnerJoin], isBroadcast=[true], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a AS a3, c AS c1], where=[<(b, 5)], outputBinaryRow=[true])
   :     +- BoundedDataStreamScan(table=[[_DataStreamTable_2]], fields=[a, b, c])
   +- Calc(select=[a1, b])
      +- HashJoin(where=[=(a1, a2)], join=[a1, b, a2], joinType=[InnerJoin], isBroadcast=[true], build=[right])
         :- Calc(select=[a AS a1, b], where=[<=(a, 10)])
         :  +- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c])
         +- Exchange(distribution=[broadcast])
            +- Calc(select=[a AS a2], where=[>=(b, 5)], outputBinaryRow=[true])
               +- BoundedDataStreamScan(table=[[_DataStreamTable_2]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSinkSplitOnUnion1">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[SmallTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[Sink]]
Calc(select=[TMP_0 AS total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS TMP_0])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- Calc(select=[a, c])
               :  +- BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])
               +- Calc(select=[d, f])
                  +- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSinkSplitOnUnion2">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[SmallTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
[[Sink]]
Calc(select=[TMP_0 AS total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS TMP_0])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Calc(select=[a])
            +- Union(all=[true], union=[a, c])
               :- Calc(select=[a, c])
               :  +- BoundedDataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c])
               +- Calc(select=[d, f])
                  +- BoundedDataStreamScan(table=[[_DataStreamTable_1]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
</Root>
