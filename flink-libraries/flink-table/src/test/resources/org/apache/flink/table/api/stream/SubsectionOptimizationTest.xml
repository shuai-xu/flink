<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testMultiSinks">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(sum_a=[$0])
      +- LogicalProject(sum_a=[$1], c=[$0])
         +- LogicalAggregate(group=[{0}], sum_a=[SUM($1)])
            +- LogicalProject(c=[$2], a=[$0])
               +- LogicalTableScan(table=[[builtin, default, SmallTable3]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(sum_a=[$0])
      +- LogicalProject(sum_a=[$1], c=[$0])
         +- LogicalAggregate(group=[{0}], sum_a=[SUM($1)])
            +- LogicalProject(c=[$2], a=[$0])
               +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecCalc(select=[sum_a], reuse_id=[1])
+- StreamExecGroupAggregate(groupBy=[c], select=[c, SUM(a) AS sum_a])
   +- StreamExecExchange(distribution=[hash[c]])
      +- StreamExecCalc(select=[c, a])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])

StreamExecSink(fields=[total_sum])
+- StreamExecCalc(select=[TMP_0 AS total_sum])
   +- StreamExecGroupAggregate(select=[SUM_RETRACT(sum_a) AS TMP_0])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[1])

StreamExecSink(fields=[total_min])
+- StreamExecCalc(select=[TMP_1 AS total_min])
   +- StreamExecGroupAggregate(select=[MIN_RETRACT(sum_a) AS TMP_1])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks1SQL">
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], total_sum=[SUM($0)])
+- LogicalProject(sum_a=[$0])
   +- LogicalTableScan(table=[[builtin, default, table1]])

LogicalAggregate(group=[{}], total_min=[MIN($0)])
+- LogicalProject(sum_a=[$0])
   +- LogicalTableScan(table=[[builtin, default, table1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecCalc(select=[sum_a], reuse_id=[1])
+- StreamExecGroupAggregate(groupBy=[c], select=[c, SUM(a) AS sum_a])
   +- StreamExecExchange(distribution=[hash[c]])
      +- StreamExecCalc(select=[c, a])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])

StreamExecSink(fields=[total_sum])
+- StreamExecGroupAggregate(select=[SUM_RETRACT(sum_a) AS total_sum])
   +- StreamExecExchange(distribution=[single])
      +- Reused(reference_id=[1])

StreamExecSink(fields=[total_min])
+- StreamExecGroupAggregate(select=[MIN_RETRACT(sum_a) AS total_min])
   +- StreamExecExchange(distribution=[single])
      +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks2">
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a1=[AS($0, 'a1')], b1=[AS($1, 'b1')])
:  +- LogicalFilter(condition=[<=($0, 10)])
:     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
+- LogicalProject(a=[$2], b1=[$1])
   +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      :- LogicalProject(a1=[AS($0, 'a1')], b1=[AS($1, 'b1')])
      :  +- LogicalFilter(condition=[<=($0, 10)])
      :     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
      +- LogicalTableScan(table=[[builtin, default, SmallTable5]])

LogicalUnion(all=[true])
:- LogicalProject(a1=[AS($0, 'a1')], b1=[AS($1, 'b1')])
:  +- LogicalFilter(condition=[<=($0, 10)])
:     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
+- LogicalProject(a=[$2], b1=[$1])
   +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      :- LogicalProject(a1=[AS($0, 'a1')], b1=[AS($1, 'b1')])
      :  +- LogicalFilter(condition=[<=($0, 10)])
      :     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
      +- LogicalTableScan(table=[[builtin, default, SmallTable5]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecUnion(all=[true], union=[a1, b1], reuse_id=[1])
:- StreamExecCalc(select=[a AS a1, b AS b1], where=[<=(a, 10)])
:  +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
+- StreamExecCalc(select=[a, b1])
   +- StreamExecJoin(where=[=(a1, a)], join=[a1, b1, a], joinType=[InnerJoin])
      :- StreamExecExchange(distribution=[hash[a1]])
      :  +- StreamExecCalc(select=[a AS a1, b AS b1], where=[<=(a, 10)])
      :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
      +- StreamExecExchange(distribution=[hash[a]])
         +- StreamExecCalc(select=[a])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])

StreamExecSink(fields=[a1, b1])
+- Reused(reference_id=[1])

StreamExecSink(fields=[a1, b1])
+- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks2SQL">
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a1=[$0], b1=[$1])
:  +- LogicalTableScan(table=[[builtin, default, table1]])
+- LogicalProject(a=[$0], b1=[$1])
   +- LogicalTableScan(table=[[builtin, default, table2]])

LogicalUnion(all=[true])
:- LogicalProject(a1=[$0], b1=[$1])
:  +- LogicalTableScan(table=[[builtin, default, table1]])
+- LogicalProject(a=[$0], b1=[$1])
   +- LogicalTableScan(table=[[builtin, default, table2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecUnion(all=[true], union=[a, b], reuse_id=[1])
:- StreamExecCalc(select=[a, b], where=[<=(a, 10)])
:  +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
+- StreamExecCalc(select=[a0 AS a, b AS b1])
   +- StreamExecJoin(where=[=(a0, a)], join=[a, b, a0], joinType=[InnerJoin])
      :- StreamExecExchange(distribution=[hash[a]])
      :  +- StreamExecCalc(select=[a, b], where=[<=(a, 10)])
      :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
      +- StreamExecExchange(distribution=[hash[a]])
         +- StreamExecCalc(select=[a])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])

StreamExecSink(fields=[a1, b1])
+- Reused(reference_id=[1])

StreamExecSink(fields=[a1, b1])
+- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks3">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$2], b1=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
   :- LogicalProject(a1=[AS($0, 'a1')], b1=[AS($1, 'b1')])
   :  +- LogicalFilter(condition=[<=($0, 10)])
   :     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
   +- LogicalTableScan(table=[[builtin, default, SmallTable5]])

LogicalUnion(all=[true])
:- LogicalProject(a1=[AS($0, 'a1')], b1=[AS($1, 'b1')])
:  +- LogicalFilter(condition=[<=($0, 10)])
:     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
+- LogicalProject(a=[$2], b1=[$1])
   +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      :- LogicalProject(a1=[AS($0, 'a1')], b1=[AS($1, 'b1')])
      :  +- LogicalFilter(condition=[<=($0, 10)])
      :     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
      +- LogicalTableScan(table=[[builtin, default, SmallTable5]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecCalc(select=[a AS a1, b AS b1], where=[<=(a, 10)], reuse_id=[1])
+- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])

StreamExecCalc(select=[a, b1], reuse_id=[2])
+- StreamExecJoin(where=[=(a1, a)], join=[a1, b1, a], joinType=[InnerJoin])
   :- StreamExecExchange(distribution=[hash[a1]])
   :  +- Reused(reference_id=[1])
   +- StreamExecExchange(distribution=[hash[a]])
      +- StreamExecCalc(select=[a])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])

StreamExecSink(fields=[a, b1])
+- Reused(reference_id=[2])

StreamExecSink(fields=[a1, b1])
+- StreamExecUnion(all=[true], union=[a1, b1])
   :- Reused(reference_id=[1])
   +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks3SQL">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$2], b1=[$1])
+- LogicalFilter(condition=[=($2, $0)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, table1]])
      +- LogicalTableScan(table=[[builtin, default, SmallTable5]])

LogicalUnion(all=[true])
:- LogicalProject(a1=[$0], b1=[$1])
:  +- LogicalTableScan(table=[[builtin, default, table1]])
+- LogicalProject(a=[$0], b1=[$1])
   +- LogicalTableScan(table=[[builtin, default, table2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecCalc(select=[a, b], where=[<=(a, 10)], reuse_id=[1])
+- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])

StreamExecCalc(select=[a0 AS a, b AS b1], reuse_id=[2])
+- StreamExecJoin(where=[=(a0, a)], join=[a, b, a0], joinType=[InnerJoin])
   :- StreamExecExchange(distribution=[hash[a]])
   :  +- Reused(reference_id=[1])
   +- StreamExecExchange(distribution=[hash[a]])
      +- StreamExecCalc(select=[a])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])

StreamExecSink(fields=[a, b1])
+- Reused(reference_id=[2])

StreamExecSink(fields=[a1, b1])
+- StreamExecUnion(all=[true], union=[a, b])
   :- Reused(reference_id=[1])
   +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks4">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b=[$1], c2=[AS($3, 'c2')])
+- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
   :- LogicalProject(a1=[AS($0, 'a1')], b=[$1])
   :  +- LogicalFilter(condition=[<=($0, 10)])
   :     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
   +- LogicalProject(a2=[AS($0, 'a2')], c=[$2])
      +- LogicalFilter(condition=[>=($1, 5)])
         +- LogicalProject(a=[$0], b=[$1], c=[$2])
            +- LogicalFilter(condition=[>=($0, 0)])
               +- LogicalTableScan(table=[[builtin, default, SmallTable3]])

LogicalProject(a1=[$2], b=[$3], c1=[$1])
+- LogicalJoin(condition=[=($2, $0)], joinType=[inner])
   :- LogicalProject(a3=[AS($0, 'a3')], c1=[AS($2, 'c1')])
   :  +- LogicalFilter(condition=[<($1, 5)])
   :     +- LogicalProject(a=[$0], b=[$1], c=[$2])
   :        +- LogicalFilter(condition=[>=($0, 0)])
   :           +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
   +- LogicalProject(a1=[$0], b=[$1], c2=[AS($3, 'c2')])
      +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
         :- LogicalProject(a1=[AS($0, 'a1')], b=[$1])
         :  +- LogicalFilter(condition=[<=($0, 10)])
         :     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         +- LogicalProject(a2=[AS($0, 'a2')], c=[$2])
            +- LogicalFilter(condition=[>=($1, 5)])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalFilter(condition=[>=($0, 0)])
                     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecCalc(select=[a, b, c], where=[>=(a, 0)], reuse_id=[1])
+- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])

StreamExecCalc(select=[a1, b, c AS c2], reuse_id=[2])
+- StreamExecJoin(where=[=(a1, a2)], join=[a1, b, a2, c], joinType=[InnerJoin])
   :- StreamExecExchange(distribution=[hash[a1]])
   :  +- StreamExecCalc(select=[a AS a1, b], where=[<=(a, 10)])
   :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
   +- StreamExecExchange(distribution=[hash[a2]])
      +- StreamExecCalc(select=[a AS a2, c], where=[>=(b, 5)])
         +- Reused(reference_id=[1])

StreamExecSink(fields=[a1, b, c2])
+- Reused(reference_id=[2])

StreamExecSink(fields=[a1, b, c1])
+- StreamExecCalc(select=[a1, b, c1])
   +- StreamExecJoin(where=[=(a1, a3)], join=[a3, c1, a1, b], joinType=[InnerJoin])
      :- StreamExecExchange(distribution=[hash[a3]])
      :  +- StreamExecCalc(select=[a AS a3, c AS c1], where=[<(b, 5)])
      :     +- Reused(reference_id=[1])
      +- StreamExecExchange(distribution=[hash[a1]])
         +- StreamExecCalc(select=[a1, b])
            +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks4SQL">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b=[$1], c2=[$3])
+- LogicalFilter(condition=[=($0, $2)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, table1]])
      +- LogicalTableScan(table=[[builtin, default, table3]])

LogicalProject(a1=[$2], b=[$3], c1=[$1])
+- LogicalFilter(condition=[=($2, $0)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, table4]])
      +- LogicalTableScan(table=[[builtin, default, table5]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecCalc(select=[a, b, c], where=[>=(a, 0)], reuse_id=[1])
+- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])

StreamExecCalc(select=[a AS a1, b, c AS c2], reuse_id=[2])
+- StreamExecJoin(where=[=(a, a2)], join=[a, b, a2, c], joinType=[InnerJoin])
   :- StreamExecExchange(distribution=[hash[a]])
   :  +- StreamExecCalc(select=[a, b], where=[<=(a, 10)])
   :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
   +- StreamExecExchange(distribution=[hash[a2]])
      +- StreamExecCalc(select=[a AS a2, c], where=[>=(b, 5)])
         +- Reused(reference_id=[1])

StreamExecSink(fields=[a1, b, c2])
+- Reused(reference_id=[2])

StreamExecSink(fields=[a1, b, c1])
+- StreamExecCalc(select=[a1, b, c1])
   +- StreamExecJoin(where=[=(a1, a3)], join=[a3, c1, a1, b], joinType=[InnerJoin])
      :- StreamExecExchange(distribution=[hash[a3]])
      :  +- StreamExecCalc(select=[a AS a3, c AS c1], where=[<(b, 5)])
      :     +- Reused(reference_id=[1])
      +- StreamExecExchange(distribution=[hash[a1]])
         +- StreamExecCalc(select=[a1, b])
            +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion1">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable1]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecUnion(all=[true], union=[a], reuse_id=[1])
:- StreamExecCalc(select=[a])
:  +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
+- StreamExecCalc(select=[d])
   +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])

StreamExecSink(fields=[total_sum])
+- StreamExecCalc(select=[TMP_0 AS total_sum])
   +- StreamExecGroupAggregate(select=[SUM(a) AS TMP_0])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[1])

StreamExecSink(fields=[total_min])
+- StreamExecCalc(select=[TMP_1 AS total_min])
   +- StreamExecGroupAggregate(select=[MIN(a) AS TMP_1])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion2">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable1]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecUnion(all=[true], union=[a], reuse_id=[1])
:- StreamExecCalc(select=[a])
:  +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
+- StreamExecCalc(select=[d])
   +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])

StreamExecSink(fields=[total_sum])
+- StreamExecCalc(select=[TMP_0 AS total_sum])
   +- StreamExecGroupAggregate(select=[SUM(a) AS TMP_0])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[1])

StreamExecSink(fields=[total_min])
+- StreamExecCalc(select=[TMP_1 AS total_min])
   +- StreamExecGroupAggregate(select=[MIN(a) AS TMP_1])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion3">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable2]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable2]])

LogicalProject(a=[$0])
+- LogicalUnion(all=[true])
   :- LogicalProject(a=[$0], c=[$2])
   :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
   +- LogicalProject(d=[$0], f=[$2])
      +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecCalc(select=[a, c], reuse_id=[2])
+- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])

StreamExecCalc(select=[d, f], reuse_id=[3])
+- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])

StreamExecUnion(all=[true], union=[a], reuse_id=[1])
:- StreamExecUnion(all=[true], union=[a])
:  :- StreamExecCalc(select=[a])
:  :  +- Reused(reference_id=[2])
:  +- StreamExecCalc(select=[d])
:     +- Reused(reference_id=[3])
+- StreamExecCalc(select=[a])
   +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_2]])

StreamExecSink(fields=[total_sum])
+- StreamExecCalc(select=[TMP_0 AS total_sum])
   +- StreamExecGroupAggregate(select=[SUM(a) AS TMP_0])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[1])

StreamExecSink(fields=[total_min])
+- StreamExecCalc(select=[TMP_1 AS total_min])
   +- StreamExecGroupAggregate(select=[MIN(a) AS TMP_1])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[1])

StreamExecSink(fields=[a])
+- StreamExecUnion(all=[true], union=[a])
   :- StreamExecCalc(select=[a])
   :  +- Reused(reference_id=[2])
   +- StreamExecCalc(select=[d])
      +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion4">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalUnion(all=[true])
   :- LogicalProject(a=[$0], c=[$2])
   :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
   +- LogicalProject(d=[$0], f=[$2])
      +- LogicalTableScan(table=[[builtin, default, SmallTable1]])

LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable2]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecCalc(select=[a, c], reuse_id=[1])
+- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])

StreamExecCalc(select=[d, f], reuse_id=[2])
+- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])

StreamExecSink(fields=[a])
+- StreamExecUnion(all=[true], union=[a])
   :- StreamExecCalc(select=[a])
   :  +- Reused(reference_id=[1])
   +- StreamExecCalc(select=[d])
      +- Reused(reference_id=[2])

StreamExecUnion(all=[true], union=[a], reuse_id=[3])
:- StreamExecUnion(all=[true], union=[a])
:  :- StreamExecCalc(select=[a])
:  :  +- Reused(reference_id=[1])
:  +- StreamExecCalc(select=[d])
:     +- Reused(reference_id=[2])
+- StreamExecCalc(select=[a])
   +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_2]])

StreamExecSink(fields=[total_sum])
+- StreamExecCalc(select=[TMP_0 AS total_sum])
   +- StreamExecGroupAggregate(select=[SUM(a) AS TMP_0])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[3])

StreamExecSink(fields=[total_min])
+- StreamExecCalc(select=[TMP_1 AS total_min])
   +- StreamExecGroupAggregate(select=[MIN(a) AS TMP_1])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion5">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable2]])

LogicalProject(total_min=[AS($0, 'total_min')])
+- LogicalAggregate(group=[{}], TMP_1=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecUnion(all=[true], union=[a], reuse_id=[1])
:- StreamExecUnion(all=[true], union=[a])
:  :- StreamExecCalc(select=[a])
:  :  +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
:  +- StreamExecCalc(select=[d])
:     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])
+- StreamExecCalc(select=[a])
   +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_2]])

StreamExecSink(fields=[total_sum])
+- StreamExecCalc(select=[TMP_0 AS total_sum])
   +- StreamExecGroupAggregate(select=[SUM(a) AS TMP_0])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[1])

StreamExecSink(fields=[total_min])
+- StreamExecCalc(select=[TMP_1 AS total_min])
   +- StreamExecGroupAggregate(select=[MIN(a) AS TMP_1])
      +- StreamExecExchange(distribution=[single])
         +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink1">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$0], cnt=[AS($1, 'cnt')])
+- LogicalAggregate(group=[{0}], TMP_0=[COUNT($1)])
   +- LogicalProject(c=[$2], b=[$1])
      +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecSink(fields=[c, cnt])
+- StreamExecCalc(select=[c, TMP_0 AS cnt])
   +- StreamExecGroupAggregate(groupBy=[c], select=[c, COUNT(b) AS TMP_0])
      +- StreamExecExchange(distribution=[hash[c]])
         +- StreamExecCalc(select=[c, b])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink1SQL">
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
+- LogicalProject(c=[$2], a=[$0])
   +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecSink(fields=[c, cnt])
+- StreamExecGroupAggregate(groupBy=[c], select=[c, COUNT(a) AS cnt])
   +- StreamExecExchange(distribution=[hash[c]])
      +- StreamExecCalc(select=[c, a])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink2">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$2], b=[$3], c1=[$1])
+- LogicalJoin(condition=[=($2, $0)], joinType=[inner])
   :- LogicalProject(a3=[AS($0, 'a3')], c1=[AS($2, 'c1')])
   :  +- LogicalFilter(condition=[<($1, 5)])
   :     +- LogicalProject(a=[$0], b=[$1], c=[$2])
   :        +- LogicalFilter(condition=[>=($0, 0)])
   :           +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
   +- LogicalProject(a1=[$0], b=[$1], c2=[AS($3, 'c2')])
      +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
         :- LogicalProject(a1=[AS($0, 'a1')], b=[$1])
         :  +- LogicalFilter(condition=[<=($0, 10)])
         :     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         +- LogicalProject(a2=[AS($0, 'a2')], c=[$2])
            +- LogicalFilter(condition=[>=($1, 5)])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalFilter(condition=[>=($0, 0)])
                     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecSink(fields=[a1, b, c1])
+- StreamExecCalc(select=[a1, b, c1])
   +- StreamExecJoin(where=[=(a1, a3)], join=[a3, c1, a1, b], joinType=[InnerJoin])
      :- StreamExecExchange(distribution=[hash[a3]])
      :  +- StreamExecCalc(select=[a AS a3, c AS c1], where=[AND(>=(a, 0), <(b, 5))])
      :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
      +- StreamExecExchange(distribution=[hash[a1]])
         +- StreamExecCalc(select=[a1, b])
            +- StreamExecJoin(where=[=(a1, a2)], join=[a1, b, a2], joinType=[InnerJoin])
               :- StreamExecExchange(distribution=[hash[a1]])
               :  +- StreamExecCalc(select=[a AS a1, b], where=[<=(a, 10)])
               :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
               +- StreamExecExchange(distribution=[hash[a2]])
                  +- StreamExecCalc(select=[a AS a2], where=[AND(>=(a, 0), >=(b, 5))])
                     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink2SQL">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$2], b=[$3], c1=[$1])
+- LogicalFilter(condition=[=($2, $0)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, table4]])
      +- LogicalTableScan(table=[[builtin, default, table5]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecSink(fields=[a1, b, c1])
+- StreamExecCalc(select=[a1, b, c1])
   +- StreamExecJoin(where=[=(a1, a3)], join=[a3, c1, a1, b], joinType=[InnerJoin])
      :- StreamExecExchange(distribution=[hash[a3]])
      :  +- StreamExecCalc(select=[a AS a3, c AS c1], where=[AND(>=(a, 0), <(b, 5))])
      :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
      +- StreamExecExchange(distribution=[hash[a1]])
         +- StreamExecCalc(select=[a AS a1, b])
            +- StreamExecJoin(where=[=(a, a2)], join=[a, b, a2], joinType=[InnerJoin])
               :- StreamExecExchange(distribution=[hash[a]])
               :  +- StreamExecCalc(select=[a, b], where=[<=(a, 10)])
               :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
               +- StreamExecExchange(distribution=[hash[a2]])
                  +- StreamExecCalc(select=[a AS a2], where=[AND(>=(a, 0), >=(b, 5))])
                     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink3">
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a1=[AS($0, 'a1')], b1=[AS($1, 'b1')])
:  +- LogicalFilter(condition=[<=($0, 10)])
:     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
+- LogicalProject(a=[$2], b1=[$1])
   +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      :- LogicalProject(a1=[AS($0, 'a1')], b1=[AS($1, 'b1')])
      :  +- LogicalFilter(condition=[<=($0, 10)])
      :     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
      +- LogicalTableScan(table=[[builtin, default, SmallTable5]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecSink(fields=[a1, b1])
+- StreamExecUnion(all=[true], union=[a1, b1])
   :- StreamExecCalc(select=[a AS a1, b AS b1], where=[<=(a, 10)])
   :  +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
   +- StreamExecCalc(select=[a, b1])
      +- StreamExecJoin(where=[=(a1, a)], join=[a1, b1, a], joinType=[InnerJoin])
         :- StreamExecExchange(distribution=[hash[a1]])
         :  +- StreamExecCalc(select=[a AS a1, b AS b1], where=[<=(a, 10)])
         :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
         +- StreamExecExchange(distribution=[hash[a]])
            +- StreamExecCalc(select=[a])
               +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink3SQL">
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a1=[$0], b1=[$1])
:  +- LogicalTableScan(table=[[builtin, default, table1]])
+- LogicalProject(a=[$0], b1=[$1])
   +- LogicalTableScan(table=[[builtin, default, table2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecSink(fields=[a1, b1])
+- StreamExecUnion(all=[true], union=[a, b])
   :- StreamExecCalc(select=[a, b], where=[<=(a, 10)])
   :  +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
   +- StreamExecCalc(select=[a0 AS a, b AS b1])
      +- StreamExecJoin(where=[=(a0, a)], join=[a, b, a0], joinType=[InnerJoin])
         :- StreamExecExchange(distribution=[hash[a]])
         :  +- StreamExecCalc(select=[a, b], where=[<=(a, 10)])
         :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
         +- StreamExecExchange(distribution=[hash[a]])
            +- StreamExecCalc(select=[a])
               +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink4">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$3], c1=[$4])
+- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
   :- LogicalProject(a1=[AS($0, 'a1')], b=[$1])
   :  +- LogicalFilter(condition=[<=($0, 10)])
   :     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
   +- LogicalProject(a3=[$0], b1=[AS($3, 'b1')], c1=[$1])
      +- LogicalJoin(condition=[=($2, $0)], joinType=[inner])
         :- LogicalProject(a3=[AS($0, 'a3')], c1=[AS($2, 'c1')])
         :  +- LogicalFilter(condition=[<($1, 5)])
         :     +- LogicalProject(a=[$0], b=[$1], c=[$2])
         :        +- LogicalFilter(condition=[>=($0, 0)])
         :           +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         +- LogicalProject(a1=[$0], b=[$1], c2=[AS($3, 'c2')])
            +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
               :- LogicalProject(a1=[AS($0, 'a1')], b=[$1])
               :  +- LogicalFilter(condition=[<=($0, 10)])
               :     +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
               +- LogicalProject(a2=[AS($0, 'a2')], c=[$2])
                  +- LogicalFilter(condition=[>=($1, 5)])
                     +- LogicalProject(a=[$0], b=[$1], c=[$2])
                        +- LogicalFilter(condition=[>=($0, 0)])
                           +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecSink(fields=[a1, b1, c1])
+- StreamExecCalc(select=[a1, b1, c1])
   +- StreamExecJoin(where=[=(a1, a3)], join=[a1, a3, b1, c1], joinType=[InnerJoin])
      :- StreamExecExchange(distribution=[hash[a1]])
      :  +- StreamExecCalc(select=[a AS a1], where=[<=(a, 10)])
      :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
      +- StreamExecExchange(distribution=[hash[a3]])
         +- StreamExecCalc(select=[a3, b AS b1, c1])
            +- StreamExecJoin(where=[=(a1, a3)], join=[a3, c1, a1, b], joinType=[InnerJoin])
               :- StreamExecExchange(distribution=[hash[a3]])
               :  +- StreamExecCalc(select=[a AS a3, c AS c1], where=[AND(>=(a, 0), <(b, 5))])
               :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
               +- StreamExecExchange(distribution=[hash[a1]])
                  +- StreamExecCalc(select=[a1, b])
                     +- StreamExecJoin(where=[=(a1, a2)], join=[a1, b, a2], joinType=[InnerJoin])
                        :- StreamExecExchange(distribution=[hash[a1]])
                        :  +- StreamExecCalc(select=[a AS a1, b], where=[<=(a, 10)])
                        :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
                        +- StreamExecExchange(distribution=[hash[a2]])
                           +- StreamExecCalc(select=[a AS a2], where=[AND(>=(a, 0), >=(b, 5))])
                              +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink4SQL">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$3], c1=[$4])
+- LogicalFilter(condition=[=($0, $2)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[builtin, default, table1]])
      +- LogicalTableScan(table=[[builtin, default, table6]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecSink(fields=[a1, b1, c1])
+- StreamExecCalc(select=[a AS a1, b1, c1])
   +- StreamExecJoin(where=[=(a, a3)], join=[a, a3, b1, c1], joinType=[InnerJoin])
      :- StreamExecExchange(distribution=[hash[a]])
      :  +- StreamExecCalc(select=[a], where=[<=(a, 10)])
      :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
      +- StreamExecExchange(distribution=[hash[a3]])
         +- StreamExecCalc(select=[a3, b AS b1, c1])
            +- StreamExecJoin(where=[=(a1, a3)], join=[a3, c1, a1, b], joinType=[InnerJoin])
               :- StreamExecExchange(distribution=[hash[a3]])
               :  +- StreamExecCalc(select=[a AS a3, c AS c1], where=[AND(>=(a, 0), <(b, 5))])
               :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
               +- StreamExecExchange(distribution=[hash[a1]])
                  +- StreamExecCalc(select=[a AS a1, b])
                     +- StreamExecJoin(where=[=(a, a2)], join=[a, b, a2], joinType=[InnerJoin])
                        :- StreamExecExchange(distribution=[hash[a]])
                        :  +- StreamExecCalc(select=[a, b], where=[<=(a, 10)])
                        :     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
                        +- StreamExecExchange(distribution=[hash[a2]])
                           +- StreamExecCalc(select=[a AS a2], where=[AND(>=(a, 0), >=(b, 5))])
                              +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSinkSplitOnUnion1">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecSink(fields=[total_sum])
+- StreamExecCalc(select=[TMP_0 AS total_sum])
   +- StreamExecGroupAggregate(select=[SUM(a) AS TMP_0])
      +- StreamExecExchange(distribution=[single])
         +- StreamExecUnion(all=[true], union=[a])
            :- StreamExecCalc(select=[a])
            :  +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
            +- StreamExecCalc(select=[d])
               +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSinkSplitOnUnion2">
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(total_sum=[AS($0, 'total_sum')])
+- LogicalAggregate(group=[{}], TMP_0=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[builtin, default, SmallTable3]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[builtin, default, SmallTable1]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[StreamExecSink(fields=[total_sum])
+- StreamExecCalc(select=[TMP_0 AS total_sum])
   +- StreamExecGroupAggregate(select=[SUM(a) AS TMP_0])
      +- StreamExecExchange(distribution=[single])
         +- StreamExecUnion(all=[true], union=[a])
            :- StreamExecCalc(select=[a])
            :  +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
            +- StreamExecCalc(select=[d])
               +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]])
]]>
    </Resource>
  </TestCase>
</Root>
