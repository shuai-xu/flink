<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testMultipleRetractTopNAfterAgg">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(category=[$0], shopId=[$1], sum_num=[$2], max_num=[$3], rank_num=[$4])
+- LogicalFilter(condition=[<=($4, 2)])
   +- LogicalProject(category=[$0], shopId=[$1], sum_num=[$2], max_num=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST, $3 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[builtin, default, MyView]])

LogicalProject(category=[$0], shopId=[$1], avg_num=[$2], cnt_num=[$3], rank_num=[$4])
+- LogicalFilter(condition=[<=($4, 2)])
   +- LogicalProject(category=[$0], shopId=[$1], avg_num=[$4], cnt_num=[$5], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST, $5 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[builtin, default, MyView]])

== Optimized Logical Plan ==
StreamExecExchange(distribution=[hash[category]], updateAsRetraction=[true], accMode=[AccRetract], reuse_id=[1])
+- StreamExecCalc(select=[category, shopId, CASE(=($f3, 0), null, sum_num) AS sum_num, max_num, CAST(/(CAST(CASE(=($f3, 0), null, sum_num)), $f3)) AS avg_num, $f3 AS cnt_num], updateAsRetraction=[true], accMode=[AccRetract])
   +- StreamExecGroupAggregate(groupBy=[category, shopId], select=[category, shopId, $SUM0(num) AS sum_num, COUNT(num) AS $f3, MAX(num) AS max_num], updateAsRetraction=[true], accMode=[AccRetract])
      +- StreamExecExchange(distribution=[hash[category, shopId]], updateAsRetraction=[true], accMode=[Acc])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]], updateAsRetraction=[true], accMode=[Acc])

StreamExecSink(fields=[category, shopId, sum_num, max_num, rank_num], updateAsRetraction=[true], accMode=[AccRetract])
+- StreamExecCalc(select=[category, shopId, sum_num, max_num, w0$o0], updateAsRetraction=[true], accMode=[AccRetract])
   +- StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[category], orderBy=[sum_num DESC, max_num ASC], rankRange=[rankStart=1, rankEnd=2], strategy=[RetractRank], select=[*, rowNum], updateAsRetraction=[true], accMode=[AccRetract])
      +- Reused(reference_id=[1])

StreamExecSink(fields=[category, shopId, avg_num, cnt_num, rank_num], updateAsRetraction=[true], accMode=[AccRetract])
+- StreamExecCalc(select=[category, shopId, avg_num, cnt_num, w0$o0], updateAsRetraction=[true], accMode=[AccRetract])
   +- StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[category], orderBy=[avg_num DESC, cnt_num ASC], rankRange=[rankStart=1, rankEnd=2], strategy=[RetractRank], select=[*, rowNum], updateAsRetraction=[true], accMode=[AccRetract])
      +- Reused(reference_id=[1])

== Physical Execution Plan ==
Stage 12 : Data Source
	content : collect elements with CollectionInputFormat

	Stage 13 : Operator
		content : SourceConversion(table:[builtin, default, _DataStreamTable_1], fields:(category, shopId, num))
		ship_strategy : FORWARD

		Stage 15 : Operator
			content : GroupAggregate(groupBy: (category, shopId), select: (category, shopId, $SUM0(num) AS sum_num, COUNT(num) AS $f3, MAX(num) AS max_num))
			ship_strategy : HASH

			Stage 16 : Operator
				content : Calc(select: (category, shopId, (($f3 = 0) CASE null CASE sum_num) AS sum_num, max_num, CAST((CAST((($f3 = 0) CASE null CASE sum_num)) / $f3)) AS avg_num, $f3 AS cnt_num))
				ship_strategy : FORWARD

				Stage 18 : Operator
					content : RetractRank(orderBy: (sum_num DESC, max_num ASC), partitionBy: (category), *, rowNum, rankStart=1, rankEnd=2)
					ship_strategy : HASH

					Stage 19 : Operator
						content : Calc(select: (category, shopId, sum_num, max_num, w0$o0))
						ship_strategy : FORWARD

						Stage 20 : Operator
							content : SinkConversion to Tuple2
							ship_strategy : FORWARD

							Stage 21 : Operator
								content : Map
								ship_strategy : FORWARD

								Stage 24 : Operator
									content : RetractRank(orderBy: (avg_num DESC, cnt_num ASC), partitionBy: (category), *, rowNum, rankStart=1, rankEnd=2)
									ship_strategy : HASH

									Stage 25 : Operator
										content : Calc(select: (category, shopId, avg_num, cnt_num, w0$o0))
										ship_strategy : FORWARD

										Stage 26 : Operator
											content : SinkConversion to Tuple2
											ship_strategy : FORWARD

											Stage 27 : Operator
												content : Map
												ship_strategy : FORWARD

												Stage 22 : Data Sink
													content : Sink: TestingRetractTableSink
													ship_strategy : FORWARD

													Stage 28 : Data Sink
														content : Sink: TestingRetractTableSink
														ship_strategy : FORWARD

]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultipleUpdateTopNAfterAgg">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(category=[$0], shopId=[$1], cnt_num=[$2], rank_num=[$3])
+- LogicalFilter(condition=[<=($3, 2)])
   +- LogicalProject(category=[$0], shopId=[$1], cnt_num=[$2], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[builtin, default, MyView]])

LogicalProject(category=[$0], shopId=[$1], max_num=[$2], rank_num=[$3])
+- LogicalFilter(condition=[<=($3, 2)])
   +- LogicalProject(category=[$0], shopId=[$1], max_num=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[builtin, default, MyView]])

== Optimized Logical Plan ==
StreamExecExchange(distribution=[hash[category]], updateAsRetraction=[false], accMode=[Acc], reuse_id=[1])
+- StreamExecGroupAggregate(groupBy=[category, shopId], select=[category, shopId, COUNT(num) AS cnt_num, MAX(num) AS max_num], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecExchange(distribution=[hash[category, shopId]], updateAsRetraction=[true], accMode=[Acc])
      +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]], updateAsRetraction=[true], accMode=[Acc])

StreamExecSink(fields=[category, shopId, cnt_num, rank_num], updateAsRetraction=[true], accMode=[AccRetract])
+- StreamExecCalc(select=[category, shopId, cnt_num, w0$o0], updateAsRetraction=[true], accMode=[AccRetract])
   +- StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[category], orderBy=[cnt_num DESC], rankRange=[rankStart=1, rankEnd=2], strategy=[UpdateFastRank[0,1]], select=[*, rowNum], updateAsRetraction=[true], accMode=[AccRetract])
      +- Reused(reference_id=[1])

StreamExecSink(fields=[category, shopId, max_num, rank_num], updateAsRetraction=[true], accMode=[AccRetract])
+- StreamExecCalc(select=[category, shopId, max_num, w0$o0], updateAsRetraction=[true], accMode=[AccRetract])
   +- StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[category], orderBy=[max_num DESC], rankRange=[rankStart=1, rankEnd=2], strategy=[UpdateFastRank[0,1]], select=[*, rowNum], updateAsRetraction=[true], accMode=[AccRetract])
      +- Reused(reference_id=[1])

== Physical Execution Plan ==
Stage 35 : Data Source
	content : collect elements with CollectionInputFormat

	Stage 36 : Operator
		content : SourceConversion(table:[builtin, default, _DataStreamTable_1], fields:(category, shopId, num))
		ship_strategy : FORWARD

		Stage 38 : Operator
			content : GroupAggregate(groupBy: (category, shopId), select: (category, shopId, COUNT(num) AS cnt_num, MAX(num) AS max_num))
			ship_strategy : HASH

			Stage 40 : Operator
				content : UpdateFastRank[0,1](orderBy: (cnt_num DESC), partitionBy: (category), *, rowNum, rankStart=1, rankEnd=2)
				ship_strategy : HASH

				Stage 41 : Operator
					content : Calc(select: (category, shopId, cnt_num, w0$o0))
					ship_strategy : FORWARD

					Stage 42 : Operator
						content : SinkConversion to Tuple2
						ship_strategy : FORWARD

						Stage 43 : Operator
							content : Map
							ship_strategy : FORWARD

							Stage 46 : Operator
								content : UpdateFastRank[0,1](orderBy: (max_num DESC), partitionBy: (category), *, rowNum, rankStart=1, rankEnd=2)
								ship_strategy : HASH

								Stage 47 : Operator
									content : Calc(select: (category, shopId, max_num, w0$o0))
									ship_strategy : FORWARD

									Stage 48 : Operator
										content : SinkConversion to Tuple2
										ship_strategy : FORWARD

										Stage 49 : Operator
											content : Map
											ship_strategy : FORWARD

											Stage 44 : Data Sink
												content : Sink: TestingRetractTableSink
												ship_strategy : FORWARD

												Stage 50 : Data Sink
													content : Sink: TestingRetractTableSink
													ship_strategy : FORWARD

]]>
    </Resource>
  </TestCase>
  <TestCase name="testNestedTopN">
    <Resource name="plan">
      <![CDATA[
StreamExecCalc(select=[a, b, count_c, w0$o0], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecRank(rankFunction=[ROW_NUMBER], orderBy=[count_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecExchange(distribution=[single], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[a], orderBy=[count_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
         +- StreamExecExchange(distribution=[hash[a]], updateAsRetraction=[false], accMode=[Acc])
            +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, COUNT(*) AS count_c], updateAsRetraction=[false], accMode=[Acc])
               +- StreamExecExchange(distribution=[hash[a, b]], updateAsRetraction=[true], accMode=[Acc])
                  +- StreamExecCalc(select=[a, b, 'cn' AS cn], updateAsRetraction=[true], accMode=[Acc])
                     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOrderByFetch">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], orderBy=[a ASC, b DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[AppendFastRank], select=[*], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[single], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[false], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOrderByLimit">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], orderBy=[a ASC, b DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[AppendFastRank], select=[*], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[single], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[false], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopN">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[a], orderBy=[b DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[AppendFastRank], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[a]], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[false], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopN2">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[a], orderBy=[b DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[AppendFastRank], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[a]], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[false], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderByCountAndOtherField">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[count_c DESC, a ASC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[b]], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, COUNT(*) AS count_c], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecExchange(distribution=[hash[a, b]], updateAsRetraction=[true], accMode=[Acc])
         +- StreamExecCalc(select=[a, b], updateAsRetraction=[true], accMode=[Acc])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNAfterAgg">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[sum_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UnaryUpdateRank[0,1]], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[b]], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, SUM(c) AS sum_c], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecExchange(distribution=[hash[a, b]], updateAsRetraction=[true], accMode=[Acc])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderByCount">
    <Resource name="plan">
      <![CDATA[
StreamExecGroupAggregate(select=[MAX_RETRACT(a) AS EXPR$0], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[single], updateAsRetraction=[true], accMode=[AccRetract])
   +- StreamExecCalc(select=[a], updateAsRetraction=[true], accMode=[AccRetract])
      +- StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[count_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*], updateAsRetraction=[true], accMode=[AccRetract])
         +- StreamExecExchange(distribution=[hash[b]], updateAsRetraction=[false], accMode=[Acc])
            +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, COUNT(*) AS count_c], updateAsRetraction=[false], accMode=[Acc])
               +- StreamExecExchange(distribution=[hash[a, b]], updateAsRetraction=[true], accMode=[Acc])
                  +- StreamExecCalc(select=[a, b], updateAsRetraction=[true], accMode=[Acc])
                     +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNWithoutRowNumber2">
    <Resource name="plan">
      <![CDATA[
StreamExecCalc(select=[CONCAT(seller_id, venture, stat_date, sku_id) AS rowkey, seller_id, sku_id, venture, stat_date, amt_dtr, byr_cnt_dtr, pv_dtr, uv_dtr], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[seller_id, venture, stat_date], orderBy=[amt_dtr DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1,2,3]], select=[*], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecExchange(distribution=[hash[seller_id, venture, stat_date]], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecGroupAggregate(groupBy=[seller_id, sku_id, venture, stat_date], select=[seller_id, sku_id, venture, stat_date, INCR_SUM(trd_amt) AS amt_dtr, COUNT(DISTINCT trd_buyer_id) AS byr_cnt_dtr, SUM(log_pv) AS pv_dtr, COUNT(DISTINCT log_visitor_id) AS uv_dtr], updateAsRetraction=[false], accMode=[Acc])
         +- StreamExecExchange(distribution=[hash[seller_id, sku_id, venture, stat_date]], updateAsRetraction=[true], accMode=[Acc])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNForVariableSize">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[c DESC], rankRange=[rankEnd=a], strategy=[UnaryUpdateRank[1]], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[b]], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecCalc(select=[a, b, add(max_c) AS c], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecGroupAggregate(groupBy=[b], select=[b, MAX(a) AS a, MAX(c) AS max_c], updateAsRetraction=[false], accMode=[Acc])
         +- StreamExecExchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[Acc])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderByIncrSum">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[sum_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[b]], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, INCR_SUM(c) AS sum_c], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecExchange(distribution=[hash[a, b]], updateAsRetraction=[true], accMode=[Acc])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderBySumWithCaseWhen">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[sum_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum])
+- StreamExecExchange(distribution=[hash[b]])
   +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, SUM($f2) AS sum_c])
      +- StreamExecExchange(distribution=[hash[a, b]])
         +- StreamExecCalc(select=[a, b, CASE(>(c, 10), 1, <(c, 0), 0, null) AS $f2])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderBySumWithCond">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[sum_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[b]], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, SUM(c) AS sum_c], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecExchange(distribution=[hash[a, b]], updateAsRetraction=[true], accMode=[Acc])
         +- StreamExecCalc(select=[a, b, c], where=[>=(c, 0)], updateAsRetraction=[true], accMode=[Acc])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderBySumWithFilterClause">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[sum_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum])
+- StreamExecExchange(distribution=[hash[b]])
   +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, SUM(c) FILTER $f3 AS sum_c])
      +- StreamExecExchange(distribution=[hash[a, b]])
         +- StreamExecCalc(select=[a, b, c, IS TRUE(AND(>=(c, 0), <(a, 0))) AS $f3])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderBySumWithFilterClause2">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[sum_c ASC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum])
+- StreamExecExchange(distribution=[hash[b]])
   +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, SUM(c) FILTER $f3 AS sum_c])
      +- StreamExecExchange(distribution=[hash[a, b]])
         +- StreamExecCalc(select=[a, b, c, IS TRUE(AND(<=(c, 0), <(a, 0))) AS $f3])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderBySumWithIf">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[sum_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum])
+- StreamExecExchange(distribution=[hash[b]])
   +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, SUM($f2) AS sum_c])
      +- StreamExecExchange(distribution=[hash[a, b]])
         +- StreamExecCalc(select=[a, b, IF(>(c, 10), 1, 0) AS $f2])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNth">
    <Resource name="plan">
      <![CDATA[
StreamExecCalc(select=[a, b, c, 10 AS rank_num], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[a], orderBy=[b DESC], rankRange=[rankStart=10, rankEnd=10], strategy=[AppendFastRank], select=[*], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecExchange(distribution=[hash[a]], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[false], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNWithGroupByConstantKey">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[a], orderBy=[count_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[a]], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecGroupAggregate(groupBy=[a, b], select=[a, b, COUNT(*) AS count_c], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecExchange(distribution=[hash[a, b]], updateAsRetraction=[true], accMode=[Acc])
         +- StreamExecCalc(select=[a, b, 'cn' AS cn], updateAsRetraction=[true], accMode=[Acc])
            +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNWithKeyChanged">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[sum_c DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[RetractRank], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[AccRetract])
   +- StreamExecGroupAggregate(groupBy=[a], select=[a, LAST_VALUE(b) AS b, SUM(c) AS sum_c], updateAsRetraction=[true], accMode=[AccRetract])
      +- StreamExecExchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNWithFilter">
    <Resource name="plan">
      <![CDATA[
StreamExecCalc(select=[w0$o0 AS rank_num, a, c], where=[IS NOT NULL(b)], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[a], orderBy=[b DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[AppendFastRank], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecExchange(distribution=[hash[a]], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecCalc(select=[a, b, c], where=[>(c, 1000)], updateAsRetraction=[false], accMode=[Acc])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[false], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNWithPartialFinalAgg">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[b], orderBy=[$f3 DESC], rankRange=[rankStart=1, rankEnd=10], strategy=[UpdateFastRank[0,1]], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[b]], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecGlobalGroupAggregate(groupBy=[a, b], select=[a, b, SUM_RETRACT((sum$0, count$1)) AS $f2, $SUM0_RETRACT(sum0$2) AS $f3], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecExchange(distribution=[hash[a, b]], updateAsRetraction=[true], accMode=[Acc])
         +- StreamExecLocalGroupAggregate(groupBy=[a, b], select=[a, b, SUM_RETRACT($f3_0) AS (sum$0, count$1), $SUM0_RETRACT($f4) AS sum0$2, COUNT_RETRACT(*) AS count$3], updateAsRetraction=[true], accMode=[Acc])
            +- StreamExecGlobalGroupAggregate(groupBy=[a, b, $f3], select=[a, b, $f3, SUM(sum$0) AS $f3_0, COUNT(distinct$0 count$1) AS $f4], updateAsRetraction=[true], accMode=[AccRetract])
               +- StreamExecExchange(distribution=[hash[a, b, $f3]], updateAsRetraction=[true], accMode=[Acc])
                  +- StreamExecLocalGroupAggregate(groupBy=[a, b, $f3], select=[a, b, $f3, SUM(c) FILTER $g_1 AS sum$0, COUNT(distinct$0 c) FILTER $g_0 AS count$1, DISTINCT(c) AS distinct$0], updateAsRetraction=[true], accMode=[Acc])
                     +- StreamExecCalc(select=[a, b, c, $f3, =($e, 1) AS $g_1, =($e, 0) AS $g_0], updateAsRetraction=[true], accMode=[Acc])
                        +- StreamExecExpand(projects=[{a, b, c, $f3, 0 AS $e}, {a, b, c, null AS $f3, 1 AS $e}], updateAsRetraction=[true], accMode=[Acc])
                           +- StreamExecCalc(select=[a, b, c, MOD(HASH_CODE(c), 1024) AS $f3], where=[>=(c, 0)], updateAsRetraction=[true], accMode=[Acc])
                              +- StreamExecMiniBatchAssigner(interval=[1000ms], updateAsRetraction=[true], accMode=[Acc])
                                 +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_0]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnarySortTopNOnString">
    <Resource name="plan">
      <![CDATA[
StreamExecRank(rankFunction=[ROW_NUMBER], partitionBy=[category], orderBy=[max_price ASC], rankRange=[rankStart=1, rankEnd=3], strategy=[UnaryUpdateRank[0,1]], select=[*, rowNum], updateAsRetraction=[false], accMode=[Acc])
+- StreamExecExchange(distribution=[hash[category]], updateAsRetraction=[false], accMode=[Acc])
   +- StreamExecGroupAggregate(groupBy=[category, shopId], select=[category, shopId, MAX(price) AS max_price], updateAsRetraction=[false], accMode=[Acc])
      +- StreamExecExchange(distribution=[hash[category, shopId]], updateAsRetraction=[true], accMode=[Acc])
         +- StreamExecDataStreamScan(table=[[builtin, default, _DataStreamTable_1]], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
</Root>
